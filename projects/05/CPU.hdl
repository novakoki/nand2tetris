// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(sel = instruction[15], a[0..14] = instruction[0..14], b = outalu, out = ina);

    Not(in = instruction[15], out = not15);
    Or(a = not15, b = instruction[5], out = ca);
    ARegister(in = ina, load = ca, out = outa);//A-Register
    
    And(a = instruction[15], b = instruction[4], out = cd);
    DRegister(in = outalu, load = cd, out = outd);//D-Register
    
    Mux16(sel = instruction[12], a = outa, b = inM, out = outma);
    ALU(x = outd, y = outma, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outalu, zr = zr, ng = nr);

    And(a = instruction[15], b = instruction[3], out = cm);
    Mux16(sel = cm, b = outalu, out = outM);
    Mux(sel = cm, a = false, b = true, out = writeM);
    
    Or(a = zr, b = nr, out = notpr);
    Not(in = notpr, out = pr);

    DMux8Way(in = true, sel[0] = instruction[0], sel[1] = instruction[1], sel[2] = instruction[2], a = a1, b = b1, c = c1, d = d1, e = e1, f = f1, g = g1, h = h1);
    
    And(a = b1, b = pr, out = b3);
    
    And(a = c1, b = zr, out = c3);
    
    Or(a = pr, b = zr, out = d2);
    And(a = d1, b = d2, out = d3);
    
    And(a = nr, b = e1, out = e3);
    
    Or(a = pr, b = nr , out = f2);
    And(a = f1, b = f2, out = f3);
    
    Or(a = nr, b = zr, out = g2);
    And(a = g1, b = g2, out = g3);

    Or8Way(in[0] = false, in[2] = b3, in[3] = c3, in[4] = d3, in[5] = e3, in[6] = f3, in[7] = g3, in[1] = h1, out = jump);
    And(a = instruction[15], b = jump, out = cj);

    PC(in = outa, reset = reset, load = cj, inc = true, out[0..14] = pc);

    Not16(in = outa, out = nota);
    Not16(in = nota, out[0..14] = addressM);
}